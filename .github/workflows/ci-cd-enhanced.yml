name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # SECURITY & DEPENDENCY SCANNING
  # ==============================================================================
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: |
          cd apps/web
          npm audit --audit-level=high
          
      - name: Python security scan with bandit
        run: |
          cd apps/backend
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            apps/backend/bandit-report.json

  # ==============================================================================
  # FRONTEND TESTING & LINTING
  # ==============================================================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run Prettier check
        run: npm run format:check
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run unit tests
        run: npm run test:unit -- --coverage
        
      - name: Run component tests
        run: npm run test:component
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/coverage-final.json
          flags: frontend
          
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: apps/web/.next

  # ==============================================================================
  # BACKEND TESTING & LINTING
  # ==============================================================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: casablanca_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run Black code formatter check
        run: black --check .
        
      - name: Run isort import sorting check
        run: isort --check-only .
        
      - name: Run flake8 linting
        run: flake8 .
        
      - name: Run mypy type checking
        run: mypy .
        
      - name: Run pytest unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/casablanca_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml
          
      - name: Run pytest integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/casablanca_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration/ -v
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage.xml
          flags: backend

  # ==============================================================================
  # MOBILE APP TESTING
  # ==============================================================================
  mobile-test:
    name: Mobile App Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/mobile
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npm run type-check
        
      - name: Run unit tests
        run: npm run test -- --coverage
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/mobile/coverage/coverage-final.json
          flags: mobile

  # ==============================================================================
  # END-TO-END TESTING
  # ==============================================================================
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: casablanca_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd apps/web && npm ci
          cd ../backend && pip install -r requirements.txt
          
      - name: Start backend server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/casablanca_e2e
        run: |
          cd apps/backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Start frontend server
        run: |
          cd apps/web
          npm run build
          npm run start &
          sleep 15
          
      - name: Install Playwright
        run: |
          cd apps/web
          npx playwright install
          
      - name: Run E2E tests
        run: |
          cd apps/web
          npm run test:e2e
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: apps/web/test-results/

  # ==============================================================================
  # PERFORMANCE TESTING
  # ==============================================================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd apps/web && npm ci
          
      - name: Build application
        run: |
          cd apps/web
          npm run build
          
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          cd apps/web
          lhci autorun
          
      - name: Run load testing with Artillery
        run: |
          npm install -g artillery
          cd apps/backend
          artillery run tests/load/api-load-test.yml
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            apps/web/lhci_reports/
            apps/backend/artillery-report.json

  # ==============================================================================
  # DOCKER BUILD & REGISTRY
  # ==============================================================================
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, frontend-test, backend-test, mobile-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Docker security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

  # ==============================================================================
  # STAGING DEPLOYMENT
  # ==============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Staging Environment
        run: |
          echo "Deploying to staging..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==============================================================================
  # PRODUCTION DEPLOYMENT (BLUE/GREEN)
  # ==============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-test, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy Blue Environment
        run: |
          echo "Deploying to blue environment..."
          kubectl apply -f k8s/production/blue/
          
      - name: Wait for Blue Environment Health Check
        run: |
          echo "Waiting for blue environment to be healthy..."
          kubectl wait --for=condition=available --timeout=300s deployment/casablanca-insight-blue
          
      - name: Run Production Smoke Tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke test commands here
          
      - name: Switch Traffic to Blue (Blue/Green Deployment)
        run: |
          echo "Switching traffic to blue environment..."
          kubectl patch service casablanca-insight-service -p '{"spec":{"selector":{"version":"blue"}}}'
          
      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          kubectl get pods -l version=blue
          kubectl get service casablanca-insight-service
          
      - name: Cleanup Green Environment
        run: |
          echo "Cleaning up green environment..."
          kubectl delete deployment casablanca-insight-green --ignore-not-found=true
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          text: 'Production deployment completed successfully'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==============================================================================
  # ROLLBACK CAPABILITY
  # ==============================================================================
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Rollback to Previous Version
        run: |
          echo "Rolling back to previous version..."
          kubectl rollout undo deployment/casablanca-insight-blue
          
      - name: Verify Rollback
        run: |
          echo "Verifying rollback..."
          kubectl rollout status deployment/casablanca-insight-blue
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'Production rollback completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==============================================================================
  # MONITORING & ALERTS
  # ==============================================================================
  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Configure monitoring alerts
        run: |
          echo "Setting up monitoring alerts..."
          # Add monitoring configuration here
          
      - name: Setup health checks
        run: |
          echo "Setting up health checks..."
          # Add health check configuration here
          
      - name: Configure log aggregation
        run: |
          echo "Configuring log aggregation..."
          # Add log configuration here

  # ==============================================================================
  # CLEANUP & MAINTENANCE
  # ==============================================================================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Cleanup old Docker images
        run: |
          echo "Cleaning up old Docker images..."
          # Add cleanup commands here
          
      - name: Cleanup old deployments
        run: |
          echo "Cleaning up old deployments..."
          # Add cleanup commands here
          
      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          # Add reporting commands here